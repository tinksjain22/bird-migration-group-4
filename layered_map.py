# -*- coding: utf-8 -*-
"""Layered Map.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x_UYm33AHkkZHmkj7k_K2musZm3PRT6J
"""

import pandas as pd
import plotly.express as px

# Load your data (replace 'your_file.csv' with the path to your CSV file)
data = pd.read_csv("/threatened-bird-species.csv")

# Create a choropleth map with a custom legend range (0 to 100)
fig = px.choropleth(
    data,
    locations="Code",  # ISO country codes
    color="Bird species, threatened",
    hover_name="Entity",
    color_continuous_scale="Reds",
    range_color=(0, 100),  # Set legend range from 0 to 100
    title="Threatened Bird Species by Country (2023)",
    labels={"Bird species, threatened": "Number of Threatened Species"}
)

# Increase the map plot area by adjusting width and height
fig.update_layout(
    width=2200,  # Set width of the plot
    height=800,  # Set height of the plot
)

# Display the map
fig.show()

import pandas as pd
import plotly.express as px

# Load your data (replace 'your_file.csv' with the path to your CSV file)
data = pd.read_csv("/new_fires.csv")
fig = px.choropleth(
    data,
    geojson=data['Alpha-3 code'],
    locations='Alpha-3 code',
    color='Annual area burnt by wildfires',
    animation_frame='Year',
    color_continuous_scale= px.colors.sequential.Reds,
    title='Area Burnt by Wildfires over Time',
    height = 900,
    width = 1250
)
fig.update_geos(fitbounds="locations", visible=False)
fig.layout.updatemenus[0].buttons[0].args[1]['transition']['duration'] = 10000

# Export to HTML for project
fig.write_html("wildfiredata.html")
fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load the data (replace the paths with the actual paths to your CSV files)
wildfire_data = pd.read_csv("/new_fires.csv")
bird_data = pd.read_csv("/threatened-bird-species.csv")

# Ensure that the columns are numeric (force conversion to numeric if necessary)
wildfire_data['Annual area burnt by wildfires'] = pd.to_numeric(wildfire_data['Annual area burnt by wildfires'], errors='coerce')
bird_data['Bird species, threatened'] = pd.to_numeric(bird_data['Bird species, threatened'], errors='coerce')

# Create the first choropleth for wildfire data (trace 1)
trace1 = go.Choropleth(
    z=wildfire_data['Annual area burnt by wildfires'],
    locations=wildfire_data['Alpha-3 code'],
    colorscale='Reds',
    colorbar_title='Area Burnt (ha)',
    colorbar_tickprefix='',
    colorbar_ticksuffix=' ha',
    colorbar_tickvals=[0, 20000000, 40000000, 60000000, 80000000],  # Tick values for 0-80M range
    colorbar_ticktext=['0', '20M', '40M', '60M', '80M'],  # Tick labels for 0-80M range
    hovertemplate='%{location}: %{z}',
    name='Wildfire Data'
)

# Create the second choropleth for bird data (trace 2)
trace2 = go.Choropleth(
    z=bird_data['Bird species, threatened'],
    locations=bird_data['Code'],
    colorscale='Reds',
    colorbar_title='Threatened Species Count',
    colorbar_tickprefix='',
    colorbar_ticksuffix=' species',
    colorbar_tickvals=[0, 20, 40, 60, 80, 100],  # Tick values for 0-100 range
    colorbar_ticktext=['0', '20', '40', '60', '80', '100'],  # Tick labels for 0-100 range
    hovertemplate='%{location}: %{z}',
    name='Threatened Bird Species'
)

# Create Layout with Dropdown Menu to toggle between the maps
layout = go.Layout(
    geo=dict(
        projection_type='natural earth',
        showcoastlines=True,
        coastlinecolor='Black',
        showland=True,
        landcolor='white',
        scope='world'
    ),
    updatemenus=[{
        'buttons': [
            {
                'label': 'Wildfire Data',
                'method': 'relayout',
                'args': ['visible', [True, False]]  # Show only the first trace
            },
            {
                'label': 'Threatened Bird Species',
                'method': 'relayout',
                'args': ['visible', [False, True]]  # Show only the second trace
            }
        ],
        'direction': 'down',
        'showactive': True,
        'x': 1,
        'xanchor': 'left',
        'y': 1.15,
        'yanchor': 'top'
    }],
    title='Environmental Data Maps',
    height=800,
    width=2200
)

# Create the figure with both traces
fig = go.Figure(data=[trace1, trace2], layout=layout)

# Display the figure
fig.show()

import pandas as pd
import plotly.graph_objects as go

# Load the data (replace the paths with the actual paths to your CSV files)
wildfire_data = pd.read_csv("/new_fires.csv")
bird_data = pd.read_csv("/threatened-bird-species.csv")

# Filter the data for the year 2018
wildfire_data_2018 = wildfire_data[wildfire_data['Year'] == 2018]
bird_data_2018 = bird_data[bird_data['Year'] == 2018]  # Assuming bird data also has a 'Year' column

# Ensure that the columns are numeric (force conversion to numeric if necessary)
wildfire_data_2018['Annual area burnt by wildfires'] = pd.to_numeric(wildfire_data_2018['Annual area burnt by wildfires'], errors='coerce')
bird_data_2018['Bird species, threatened'] = pd.to_numeric(bird_data_2018['Bird species, threatened'], errors='coerce')

# Create the first choropleth for wildfire data (trace 1)
trace1 = go.Choropleth(
    z=wildfire_data_2018['Annual area burnt by wildfires'],
    locations=wildfire_data_2018['Alpha-3 code'],  # Use 'Alpha-3 code' for locations
    colorscale='Reds',
    colorbar_title='Area Burnt (ha)',
    colorbar_tickprefix='',
    colorbar_ticksuffix=' ha',
    colorbar_tickvals=[0, 20000000, 40000000, 60000000, 80000000],  # Tick values for 0-80M range
    colorbar_ticktext=['0', '20M', '40M', '60M', '80M'],  # Tick labels for 0-80M range
    hovertemplate='%{location}: %{z}',
    name='Wildfire Data 2018'
)

# Create the second choropleth for bird data (trace 2)
trace2 = go.Choropleth(
    z=bird_data_2018['Bird species, threatened'],
    locations=bird_data_2018['Code'],  # Assuming 'Code' has the country codes for the bird data
    colorscale='Reds',
    colorbar_title='Threatened Species Count',
    colorbar_tickprefix='',
    colorbar_ticksuffix=' species',
    colorbar_tickvals=[0, 20, 40, 60, 80, 100],  # Tick values for 0-100 range
    colorbar_ticktext=['0', '20', '40', '60', '80', '100'],  # Tick labels for 0-100 range
    hovertemplate='%{location}: %{z}',
    name='Threatened Bird Species 2018'
)

# Create Layout with Dropdown Menu to toggle between the maps
layout = go.Layout(
    geo=dict(
        projection_type='natural earth',
        showcoastlines=True,
        coastlinecolor='Black',
        showland=True,
        landcolor='white',
        scope='world'
    ),
    updatemenus=[{
        'buttons': [
            {
                'label': 'Wildfire Data 2018',
                'method': 'relayout',
                'args': ['visible', [True, False]]  # Show only the first trace
            },
            {
                'label': 'Threatened Bird Species 2018',
                'method': 'relayout',
                'args': ['visible', [False, True]]  # Show only the second trace
            },
            {
                'label': 'Show Both 2018',
                'method': 'relayout',
                'args': ['visible', [True, True]]  # Show both traces
            }
        ],
        'direction': 'down',
        'showactive': True,
        'x': 0.1,
        'xanchor': 'left',
        'y': 1.15,
        'yanchor': 'top'
    }],
    title='Environmental Data Maps for 2018',
    height=800,
    width=1200
)

# Create the figure with both traces
fig = go.Figure(data=[trace1, trace2], layout=layout)

# Display the figure
fig.show()

# Optionally, export to HTML for the project